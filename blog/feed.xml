<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">The Transcript</title>
  <id>urn:uuid:64152ecd-6cf3-3272-bc5d-91d64ac36562</id>
  <updated>2016-04-11T00:00:00Z</updated>
  <link href="https://www.getlektor.com/blog/" />
  <link href="https://www.getlektor.com/blog/feed.xml" rel="self" />
  <author>
    <name></name>
  </author>
  <subtitle type="text">Lektor's blog</subtitle>
  <generator uri="https://github.com/ajdavis/lektor-atom" version="0.1">Lektor Atom Plugin</generator>
  <entry xml:base="https://www.getlektor.com/blog/2016/4/lektor-2-released/">
    <title type="text">Lektor 2.0 Released</title>
    <id>urn:uuid:40895cb3-680d-330a-a414-9b65e72990d7</id>
    <updated>2016-04-11T00:00:00Z</updated>
    <link href="https://www.getlektor.com/blog/2016/4/lektor-2-released/" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">
&lt;div class=&quot;page-banner page-banner-500&quot; style=&quot;background-image: url(../../../../blog/2016/4/lektor-2-released/banner.jpg)&quot;&gt;&lt;/div&gt;

&lt;div class=&quot;text-block text-block-default&quot;&gt;
  &lt;p&gt;After quite a bit of wait, I'm happy to announce the 2.0 release of Lektor.
Some things that previously were supposed to go into this release were pushed
out a bit more because the wait just was too long and quite a few features
were already in this release.&lt;/p&gt;
&lt;p&gt;Here is the changelog of what's in this release:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Added &lt;code&gt;_discoverable&lt;/code&gt; system field which controls if a page should show
up in &lt;code&gt;children&lt;/code&gt;.  The default is that a page is discoverable.  Setting it
to &lt;code&gt;False&lt;/code&gt; means in practical terms that someone needs to know the URL as
all collection operations will not return it.&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;for_page&lt;/code&gt; function to pagination that returns the pagiantion for a
specific page.&lt;/li&gt;
&lt;li&gt;Make pagination next_page and prev_page be None on the edges.&lt;/li&gt;
&lt;li&gt;Allow plugins to provide publishers.&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;|markdown&lt;/code&gt; filter.&lt;/li&gt;
&lt;li&gt;Added French translations.&lt;/li&gt;
&lt;li&gt;Unicode filenames as final build artifacts are now explicitly disallowed.&lt;/li&gt;
&lt;li&gt;Serve up a 404.html as an error page in the dev server.&lt;/li&gt;
&lt;li&gt;Improvements to the path normalization and alt handling.  This should support
URL generation in more complex cases between alts now.&lt;/li&gt;
&lt;li&gt;Show a clearer error message when URL generation fails because a source
object is virtual (does not have a path).&lt;/li&gt;
&lt;li&gt;Empty text is now still valid markdown.&lt;/li&gt;
&lt;li&gt;Lektor clean now loads the plugins as well.&lt;/li&gt;
&lt;li&gt;Basic support for type customization.&lt;/li&gt;
&lt;li&gt;Fields that are absent in a content file from an alternative are now pulled
from the primary content file.&lt;/li&gt;
&lt;li&gt;Development server now resolves index.html for assets as well.&lt;/li&gt;
&lt;li&gt;Markdown processing now correctly adjusts links relative to where the
rendered output is rendered.&lt;/li&gt;
&lt;li&gt;Added Dutch translations.&lt;/li&gt;
&lt;li&gt;Added Record.get_siblings()&lt;/li&gt;
&lt;li&gt;Added various utilties: build_url, join_path, parse_path&lt;/li&gt;
&lt;li&gt;Added support for virtual paths and made pagination work with it.&lt;/li&gt;
&lt;li&gt;Added support for Query.distinct&lt;/li&gt;
&lt;li&gt;Add support for pagination url resolving on root URL.&lt;/li&gt;
&lt;li&gt;Server information can now also contain extra key/value pairs that
can be used by publishers to affect the processing.&lt;/li&gt;
&lt;li&gt;The thumbnails will now always have the correct width and height set
as an attribute.&lt;/li&gt;
&lt;li&gt;added datetime type&lt;/li&gt;
&lt;li&gt;added support for the process_image utility functions so that plugins
can use it directly.&lt;/li&gt;
&lt;li&gt;added support for included_assets and excluded_assets in the project file.&lt;/li&gt;
&lt;li&gt;added Spanish translations.&lt;/li&gt;
&lt;li&gt;added Japanese translations.&lt;/li&gt;
&lt;li&gt;added support for discovering existing alts of sources.&lt;/li&gt;
&lt;li&gt;added support for image cropping.&lt;/li&gt;
&lt;li&gt;added preliminary support for publishing on windows.&lt;/li&gt;
&lt;li&gt;children and attachments can now have a hidden flag configured explicitly.
Attachments will also no longer inherit the hidden flag of the parent
record as that is not a sensible default.&lt;/li&gt;
&lt;li&gt;changed internal sqlite consistency mode to improve performance on HDDs.&lt;/li&gt;
&lt;li&gt;allow SVG files to be treated as images.  This is something that does not
work in all situations yet (in particular thumbnailing does not actually
do anything for those)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As always you can install the release as mentioned in the release notes.
If you had a previous version of Lektor the install process should auto
upgrade.  If you use the OS X desktop build, just drag the new application over
the already existing one.&lt;/p&gt;

&lt;/div&gt;</content>
  </entry>
  <entry xml:base="https://www.getlektor.com/blog/2016/3/lektor-at-rails-girls-summer-of-code/">
    <title type="text">Lektor at Rails Girls Summer of Code 2016</title>
    <id>urn:uuid:284e765d-d6b2-37e9-89c0-f79635efbe8c</id>
    <updated>2016-03-17T00:00:00Z</updated>
    <link href="https://www.getlektor.com/blog/2016/3/lektor-at-rails-girls-summer-of-code/" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">
&lt;div class=&quot;page-banner page-banner-500&quot; style=&quot;background-image: url(../../../../blog/2016/3/lektor-at-rails-girls-summer-of-code/banner.jpg)&quot;&gt;&lt;/div&gt;

&lt;div class=&quot;text-block text-block-default&quot;&gt;
  &lt;p&gt;I'm happy to announce that Lektor is participating as a project in this year's
&lt;a href=&quot;http://railsgirlssummerofcode.org/&quot;&gt;Rails Girls Summer of Code&lt;/a&gt; (RGSOC).
Unlike what the name would suggest, RGSOC is open for all Open Source projects
and not just Ruby.&lt;/p&gt;
&lt;p&gt;The goal of RGSOC is to bring more women into programming.  To quote the
website:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Rails Girls Summer of Code is a global fellowship program aimed at bringing
more diversity into Open Source. Successful applicants are paid a monthly
stipend, from July-September, to work on Open Source projects of their
choice.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lektor was accepted as a particpating project.  For more information about
the project there refer to the &lt;a href=&quot;https://teams.railsgirlssummerofcode.org/projects/115-lektor-cms&quot;&gt;project overview on
RGSOC&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We want to make it as easy as possible to work on Lektor during the event which
is why we will be very flexible with regards to which area interested
developers want to work on.&lt;/p&gt;
&lt;p&gt;If you are interested in working on Lektor you can reach out to us via
Twitter at &lt;a href=&quot;https://twitter.com/getlektor&quot;&gt;@getlektor&lt;/a&gt; or
&lt;a href=&quot;https://gitter.im/lektor/lektor&quot;
class=&quot;js-gitter-toggle-chat-button&quot;&gt;Gitter&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;</content>
  </entry>
  <entry xml:base="https://www.getlektor.com/blog/2016/3/road-to-lektor-2/">
    <title type="text">Road to Lektor 2.0</title>
    <id>urn:uuid:81ea219c-cd10-37a1-8fe6-04eb513ba816</id>
    <updated>2016-03-10T00:00:00Z</updated>
    <link href="https://www.getlektor.com/blog/2016/3/road-to-lektor-2/" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">
&lt;div class=&quot;page-banner page-banner-500&quot; style=&quot;background-image: url(../../../../blog/2016/3/road-to-lektor-2/header.jpg)&quot;&gt;&lt;/div&gt;

&lt;div class=&quot;text-block text-block-default&quot;&gt;
  &lt;p&gt;It's great to see what people have been building with Lektor so far. It also
shows us what still needs to be built.  For a lot of things we improved for
Lektor 2.0 which is going to release very soon indeed.  To give you some ideas
what's going to change here is a current brief look into the changelog and
what has been changed so far.&lt;/p&gt;
&lt;h2 id=&quot;page-discovery&quot;&gt;Page Discovery&lt;/h2&gt;&lt;p&gt;One of the biggest frustrations users have voiced is the inability to control
discoverability of pages.  In Lektor 1.0 you can only hide pages entirely in
which case the build process skips over them but there was no way to hide them
by default from queries.  While you could always hide pages by changing the
query, this did not work for pagination and it also required you to be quite
careful with the queries you are writing in templates.&lt;/p&gt;
&lt;p&gt;In Lektor 2.0 we introduced the system &lt;code&gt;_discoverable&lt;/code&gt; attribute which allows
you to easily hide pages from any query.  Queries can explicitly include
undiscoverable pages but you do not need to take care of this yourself.  This
makes it possible to automatically hide drafts from blogs for instance.  Lektor
will still build it but without knowing the URL you cannot see it on the
overview.&lt;/p&gt;
&lt;h2 id=&quot;virtual-paths&quot;&gt;Virtual Paths&lt;/h2&gt;&lt;p&gt;The biggest change in Lektor 2.0 is the introduction of virtual paths and
sources.  This is somewhat of an under the hood change but it has big
implications on what is possible with Lektor plugins.  Each page can have
virtual resources below it that can be provided by plugins.  These virtual
resources are separated from the page through what is called a virtual path
which is indicated by the at-sign (&lt;code&gt;@&lt;/code&gt;).  For instance this blog here uses
a plugin which provides a blog archive available at &lt;code&gt;/blog@blog-archive&lt;/code&gt; and
the year 2015 is available at &lt;code&gt;/blog@blog-archive/2015&lt;/code&gt; etc.&lt;/p&gt;
&lt;h2 id=&quot;next-/-previous-page&quot;&gt;Next / Previous Page&lt;/h2&gt;&lt;p&gt;Lektor 2.0 implements sibling support through it's virtual path system which
allows you to refer to the next or previous record easily.  This is for
instance used by this blog here to link between blog posts.&lt;/p&gt;
&lt;h2 id=&quot;improved-alternative-support&quot;&gt;Improved Alternative Support&lt;/h2&gt;&lt;p&gt;Alternatives were heavily improved.  Individual fields that are absent in
content files now fall back to the primary content file.  In addition it is
now possible to ask Lektor about which alternatives exist for a given source
or in total.  This simplifies handling of internationalized pages greatly
but more work will be done in that field.&lt;/p&gt;
&lt;h2 id=&quot;improved-plugin-support&quot;&gt;Improved Plugin Support&lt;/h2&gt;&lt;p&gt;Plugins now have the ability to do a few more things they could not do before:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;custom field types (want to render reStructuredText? You can now build a plugin)&lt;/li&gt;
&lt;li&gt;custom build programs: because of the virtual source and path support you can
now build custom build programs that build things that do not exist in the
source tree.  For instance you can build feeds, blog archives etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</content>
  </entry>
  <entry xml:base="https://www.getlektor.com/blog/2015/12/travis-and-ghpages/">
    <title type="text">Lektor Loves Travis-CI and GitHub Pages</title>
    <id>urn:uuid:f7aee37c-3165-3000-8513-cdb497a4c06a</id>
    <updated>2015-12-23T00:00:00Z</updated>
    <link href="https://www.getlektor.com/blog/2015/12/travis-and-ghpages/" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">
&lt;div class=&quot;page-banner page-banner-500&quot; style=&quot;background-image: url(../../../../blog/2015/12/travis-and-ghpages/header.jpg)&quot;&gt;&lt;/div&gt;

&lt;div class=&quot;text-block text-block-default&quot;&gt;
  &lt;p&gt;Open Source projects need websites, that's a given, and one of the most popular
ways to host them these days is &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages :ext&lt;/a&gt;.
It's a free service provided by &lt;a href=&quot;https://github.com/&quot;&gt;GitHub :ext&lt;/a&gt; which allows
hosts a git repository as a website on a subdomain of &lt;code&gt;github.io&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Wouldn't it be nice if you could easily host Lektor projects on there?  Turns
out you can with the help of &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis-CI :ext&lt;/a&gt;.  Because
Lektor has built-in support for deploying to GitHub Pages pairing up the three
is a breeze.&lt;/p&gt;
&lt;p&gt;We &lt;a href=&quot;../../../../docs/deployment/travisci/&quot;&gt;created a guide :ref&lt;/a&gt; and also recorded
a screencast that goes with it:&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=410 frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;
  src=&quot;https://www.youtube.com/embed/3pj_EyZIL5A?autoplay=0&amp;fs=1&quot;&gt;
&lt;/iframe&gt;
&lt;/div&gt;</content>
  </entry>
  <entry xml:base="https://www.getlektor.com/blog/2015/12/hello-lektor/">
    <title type="text">Hello Lektor!</title>
    <id>urn:uuid:07ebcd6b-551f-3e4b-823d-95880a3e75dc</id>
    <updated>2015-12-21T00:00:00Z</updated>
    <link href="https://www.getlektor.com/blog/2015/12/hello-lektor/" />
    <author>
      <name>Armin Ronacher</name>
    </author>
    <content type="html">
&lt;div class=&quot;page-banner page-banner-500&quot; style=&quot;background-image: url(../../../../blog/2015/12/hello-lektor/banner.jpg)&quot;&gt;&lt;/div&gt;

&lt;div class=&quot;text-block text-block-default&quot;&gt;
  &lt;p&gt;About &lt;a href=&quot;http://w3techs.com/technologies/details/cm-wordpress/all/all&quot;&gt;25% of the Internet uses
Wordpress&lt;/a&gt; and
it's estimated that about 50% of Wordpress installations out there are
vulnerable to security problems because they have not been updated.  This is a
very high number.&lt;/p&gt;
&lt;p&gt;Because I know how much work it can be to keep software updated and my own
terrible track record of spending time of updating everything I'm running
I kept getting increasingly frustrated with the lack of software that would
allow me to run a simple website in a secure manner without having to resort
to all kinds of user-unfriendly hackery.&lt;/p&gt;
&lt;p&gt;While there are many static site generators none of them really matched what I
actually wanted: a content management system that just happens to run
on the client.  Most static website generators are too “hacker focused” in the
sense that they could not be used by people without programming experiences or
they are full fledged content management systems that need a server to run on
or require regular maintenance for security updates.&lt;/p&gt;
&lt;p&gt;There the hacker's favorite projects like
&lt;a href=&quot;https://github.com/getpelican/pelican&quot;&gt;Pelican&lt;/a&gt; or
&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; which support generating websites out of static
files that are tracked through version control and there are CMS systems like
&lt;a href=&quot;http://statamic.com/&quot;&gt;Statamic&lt;/a&gt; which store all of its data in flat files
— but as mentioned — needs PHP.&lt;/p&gt;
&lt;p&gt;None of those were what I was looking for.  Static file generators like Jekyll
are nice in a way but not just end user unfriendly, but also very limited in
what you can do with them.  They are more suited for building blogs than
more complex sites.  I tried a bunch of them and built different things
with them, but ultimately always felt like something was missing.&lt;/p&gt;
&lt;p&gt;After about two years of frustration with that situation I finally sat down
and spend some time working on a system to solve this problem.  May I
introduce: Lektor.&lt;/p&gt;
&lt;h2 id=&quot;what-is-lektor?&quot;&gt;What is Lektor?&lt;/h2&gt;&lt;p&gt;Lektor combines the experience of using a content management system like
Wordpress with a static website generator like Jekyll and has some of the
flexibility of a web development framework like Django.  It can run locally
on your computer and deploy to remote servers.  All source assets are stored
either in version control or Dropbox and when you are satisfied with the end
results, you can push them online from the UI to a remote server.&lt;/p&gt;
&lt;p&gt;And this is what it roughly looks like when you look at the admin panel:&lt;/p&gt;
&lt;div class=&quot;screenshot-frame&quot;&gt;&lt;img src=&quot;admin.png&quot;&gt;&lt;/div&gt;&lt;h2 id=&quot;how-do-i-use-it?&quot;&gt;How do I use it?&lt;/h2&gt;&lt;p&gt;That depends on who you are.  Lektor is based on the idea that there are
two parties to a website: the web developers and the editors.  The former
create the design, layout, data layout and configures Lektor in general.  The
latter change the contents of the website according to the general setup.&lt;/p&gt;
&lt;p&gt;If you are a web developer you can install two versions of Lektor: you can
use the command line client or if you are on a Mac, you can install the
desktop version.  Either version comes with a handy web interface that
can be used to preview and edit all pages.&lt;/p&gt;
&lt;p&gt;Once you have configured Lektor to your liking you can put the project into
version control (or just Dropbox) and let your users modify the contents.  All
they have to do is to install the Desktop version of Lektor, double click the
project in their Dropbox and start changing it.&lt;/p&gt;
&lt;p&gt;If you just want to edit the contents of a project you can install the
Desktop version or maybe in the future use a cloud hosted version.&lt;/p&gt;
&lt;h2 id=&quot;project-layout&quot;&gt;Project Layout&lt;/h2&gt;&lt;p&gt;To get an idea how it works, you can have a look at the &lt;a href=&quot;https://github.com/lektor/lektor-website/&quot;&gt;github repository of
this website&lt;/a&gt; which contains the
project for this website and blog and have a look at the introduction
documentation: &lt;a href=&quot;../../../../docs/quickstart/&quot;&gt;Getting Started :ref&lt;/a&gt;.  You can
also find a screencast there.&lt;/p&gt;
&lt;p&gt;On a very basic level Lektor takes &lt;code&gt;.lr&lt;/code&gt; files which are basic text files
with a super simple format and generates out HTML files.  The &lt;code&gt;.lr&lt;/code&gt; files
correspond to a previously set up data model.  They are pure text format for
key/value pairs.  Each pair is separated by three dashes (&lt;code&gt;---&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;field_1: value
---
field_2:

a longer value
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can set up data models for simple things like blog posts but also more
elaborate ones if you want to build portfolio sites.  For instance you could
set up models for your projects and then access that data in the templates.&lt;/p&gt;
&lt;p&gt;The content files are stored in folders in a tree like structure and at any
level you can add other files as attachments:&lt;/p&gt;
&lt;div class=&quot;screenshot-frame&quot;&gt;&lt;img src=&quot;structure.png&quot;&gt;&lt;/div&gt;&lt;h2 id=&quot;an-open-source-project&quot;&gt;An Open Source Project&lt;/h2&gt;&lt;p&gt;Lektor is available under &lt;a href=&quot;../../../../license/&quot;&gt;a BSD license&lt;/a&gt; and run as a
community Open Source project &lt;a href=&quot;https://github.com/lektor/lektor/&quot;&gt;on github :ext&lt;/a&gt;.
The build system is written in Python, the UI in JavaScript with React and
the GUI components use Electron.&lt;/p&gt;
&lt;h2 id=&quot;feedback-appreciated&quot;&gt;Feedback Appreciated&lt;/h2&gt;&lt;p&gt;Lektor took two attempts to get into a usable application and I'm sure that
there is more that needs to be done to scratch the needs of most users.
However I also know that there is no point in delaying an initial release
unnecessarily.  What's being released today is the application as it exists
today and I think it's in a good shape to build really cool websites with
it.  I welcome you to give it a try and give feedback on what you think
about it.&lt;/p&gt;

&lt;/div&gt;</content>
  </entry>
</feed>
